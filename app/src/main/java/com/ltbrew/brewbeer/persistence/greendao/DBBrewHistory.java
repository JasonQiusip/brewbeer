package com.ltbrew.brewbeer.persistence.greendao;

import com.ltbrew.brewbeer.persistence.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DBBREW_HISTORY".
 */
public class DBBrewHistory {

    private Long id;
    private long formula_id;
    private long package_id;
    private String begin_time;
    private String end_time;
    private Integer pid;
    private Integer state;
    private Integer ratio;
    private Integer si;
    private String brewingState;
    private String st;
    private Integer ms;
    private String brewingCmnMsg;
    private Boolean showStepInfo;
    private String brewingStageInfo;
    private long recipeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBBrewHistoryDao myDao;

    private DBRecipe dBRecipe;
    private Long dBRecipe__resolvedKey;


    public DBBrewHistory() {
    }

    public DBBrewHistory(Long id) {
        this.id = id;
    }

    public DBBrewHistory(Long id, long formula_id, long package_id, String begin_time, String end_time, Integer pid, Integer state, Integer ratio, Integer si, String brewingState, String st, Integer ms, String brewingCmnMsg, Boolean showStepInfo, String brewingStageInfo, long recipeId) {
        this.id = id;
        this.formula_id = formula_id;
        this.package_id = package_id;
        this.begin_time = begin_time;
        this.end_time = end_time;
        this.pid = pid;
        this.state = state;
        this.ratio = ratio;
        this.si = si;
        this.brewingState = brewingState;
        this.st = st;
        this.ms = ms;
        this.brewingCmnMsg = brewingCmnMsg;
        this.showStepInfo = showStepInfo;
        this.brewingStageInfo = brewingStageInfo;
        this.recipeId = recipeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBBrewHistoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getFormula_id() {
        return formula_id;
    }

    public void setFormula_id(long formula_id) {
        this.formula_id = formula_id;
    }

    public long getPackage_id() {
        return package_id;
    }

    public void setPackage_id(long package_id) {
        this.package_id = package_id;
    }

    public String getBegin_time() {
        return begin_time;
    }

    public void setBegin_time(String begin_time) {
        this.begin_time = begin_time;
    }

    public String getEnd_time() {
        return end_time;
    }

    public void setEnd_time(String end_time) {
        this.end_time = end_time;
    }

    public Integer getPid() {
        return pid;
    }

    public void setPid(Integer pid) {
        this.pid = pid;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Integer getRatio() {
        return ratio;
    }

    public void setRatio(Integer ratio) {
        this.ratio = ratio;
    }

    public Integer getSi() {
        return si;
    }

    public void setSi(Integer si) {
        this.si = si;
    }

    public String getBrewingState() {
        return brewingState;
    }

    public void setBrewingState(String brewingState) {
        this.brewingState = brewingState;
    }

    public String getSt() {
        return st;
    }

    public void setSt(String st) {
        this.st = st;
    }

    public Integer getMs() {
        return ms;
    }

    public void setMs(Integer ms) {
        this.ms = ms;
    }

    public String getBrewingCmnMsg() {
        return brewingCmnMsg;
    }

    public void setBrewingCmnMsg(String brewingCmnMsg) {
        this.brewingCmnMsg = brewingCmnMsg;
    }

    public Boolean getShowStepInfo() {
        return showStepInfo;
    }

    public void setShowStepInfo(Boolean showStepInfo) {
        this.showStepInfo = showStepInfo;
    }

    public String getBrewingStageInfo() {
        return brewingStageInfo;
    }

    public void setBrewingStageInfo(String brewingStageInfo) {
        this.brewingStageInfo = brewingStageInfo;
    }

    public long getRecipeId() {
        return recipeId;
    }

    public void setRecipeId(long recipeId) {
        this.recipeId = recipeId;
    }

    /** To-one relationship, resolved on first access. */
    public DBRecipe getDBRecipe() {
        long __key = this.recipeId;
        if (dBRecipe__resolvedKey == null || !dBRecipe__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBRecipeDao targetDao = daoSession.getDBRecipeDao();
            DBRecipe dBRecipeNew = targetDao.load(__key);
            synchronized (this) {
                dBRecipe = dBRecipeNew;
            	dBRecipe__resolvedKey = __key;
            }
        }
        return dBRecipe;
    }

    public void setDBRecipe(DBRecipe dBRecipe) {
        if (dBRecipe == null) {
            throw new DaoException("To-one property 'recipeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dBRecipe = dBRecipe;
            recipeId = dBRecipe.getId();
            dBRecipe__resolvedKey = recipeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
