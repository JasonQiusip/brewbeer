package com.ltbrew.brewbeer.persistence.greendao;

import java.util.List;
import com.ltbrew.brewbeer.persistence.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DBRECIPE".
 */
public class DBRecipe {

    private Long id;
    /** Not-null value. */
    private String recipeId;
    /** Not-null value. */
    private String id_type;
    private String name;
    private String ref;
    private String cus;
    private String wr;
    private String wq;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBRecipeDao myDao;

    private List<DBBrewStep> brewSteps;
    private List<DBSlot> slots;

    public DBRecipe() {
    }

    public DBRecipe(Long id) {
        this.id = id;
    }

    public DBRecipe(Long id, String recipeId, String id_type, String name, String ref, String cus, String wr, String wq) {
        this.id = id;
        this.recipeId = recipeId;
        this.id_type = id_type;
        this.name = name;
        this.ref = ref;
        this.cus = cus;
        this.wr = wr;
        this.wq = wq;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBRecipeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRecipeId() {
        return recipeId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRecipeId(String recipeId) {
        this.recipeId = recipeId;
    }

    /** Not-null value. */
    public String getId_type() {
        return id_type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setId_type(String id_type) {
        this.id_type = id_type;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRef() {
        return ref;
    }

    public void setRef(String ref) {
        this.ref = ref;
    }

    public String getCus() {
        return cus;
    }

    public void setCus(String cus) {
        this.cus = cus;
    }

    public String getWr() {
        return wr;
    }

    public void setWr(String wr) {
        this.wr = wr;
    }

    public String getWq() {
        return wq;
    }

    public void setWq(String wq) {
        this.wq = wq;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBBrewStep> getBrewSteps() {
        if (brewSteps == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBBrewStepDao targetDao = daoSession.getDBBrewStepDao();
            List<DBBrewStep> brewStepsNew = targetDao._queryDBRecipe_BrewSteps(id);
            synchronized (this) {
                if(brewSteps == null) {
                    brewSteps = brewStepsNew;
                }
            }
        }
        return brewSteps;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBrewSteps() {
        brewSteps = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBSlot> getSlots() {
        if (slots == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBSlotDao targetDao = daoSession.getDBSlotDao();
            List<DBSlot> slotsNew = targetDao._queryDBRecipe_Slots(id);
            synchronized (this) {
                if(slots == null) {
                    slots = slotsNew;
                }
            }
        }
        return slots;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSlots() {
        slots = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
