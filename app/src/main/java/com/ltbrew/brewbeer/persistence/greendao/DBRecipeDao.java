package com.ltbrew.brewbeer.persistence.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ltbrew.brewbeer.persistence.greendao.DBRecipe;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBRECIPE".
*/
public class DBRecipeDao extends AbstractDao<DBRecipe, Long> {

    public static final String TABLENAME = "DBRECIPE";

    /**
     * Properties of entity DBRecipe.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FormulaId = new Property(1, int.class, "formulaId", false, "FORMULA_ID");
        public final static Property Id_type = new Property(2, String.class, "id_type", false, "ID_TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property IdForFn = new Property(4, String.class, "idForFn", false, "ID_FOR_FN");
        public final static Property Ref = new Property(5, String.class, "ref", false, "REF");
        public final static Property Cus = new Property(6, String.class, "cus", false, "CUS");
        public final static Property Wr = new Property(7, Integer.class, "wr", false, "WR");
        public final static Property Wq = new Property(8, Integer.class, "wq", false, "WQ");
    };

    private DaoSession daoSession;


    public DBRecipeDao(DaoConfig config) {
        super(config);
    }
    
    public DBRecipeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBRECIPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FORMULA_ID\" INTEGER NOT NULL UNIQUE ," + // 1: formulaId
                "\"ID_TYPE\" TEXT NOT NULL ," + // 2: id_type
                "\"NAME\" TEXT," + // 3: name
                "\"ID_FOR_FN\" TEXT," + // 4: idForFn
                "\"REF\" TEXT," + // 5: ref
                "\"CUS\" TEXT," + // 6: cus
                "\"WR\" INTEGER," + // 7: wr
                "\"WQ\" INTEGER);"); // 8: wq
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBRECIPE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBRecipe entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFormulaId());
        stmt.bindString(3, entity.getId_type());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String idForFn = entity.getIdForFn();
        if (idForFn != null) {
            stmt.bindString(5, idForFn);
        }
 
        String ref = entity.getRef();
        if (ref != null) {
            stmt.bindString(6, ref);
        }
 
        String cus = entity.getCus();
        if (cus != null) {
            stmt.bindString(7, cus);
        }
 
        Integer wr = entity.getWr();
        if (wr != null) {
            stmt.bindLong(8, wr);
        }
 
        Integer wq = entity.getWq();
        if (wq != null) {
            stmt.bindLong(9, wq);
        }
    }

    @Override
    protected void attachEntity(DBRecipe entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBRecipe readEntity(Cursor cursor, int offset) {
        DBRecipe entity = new DBRecipe( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // formulaId
            cursor.getString(offset + 2), // id_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idForFn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ref
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cus
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // wr
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // wq
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBRecipe entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFormulaId(cursor.getInt(offset + 1));
        entity.setId_type(cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdForFn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRef(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWr(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWq(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBRecipe entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBRecipe entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
