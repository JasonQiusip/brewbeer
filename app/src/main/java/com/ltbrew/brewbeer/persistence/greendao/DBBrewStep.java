package com.ltbrew.brewbeer.persistence.greendao;

import com.ltbrew.brewbeer.persistence.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DBBREW_STEP".
 */
public class DBBrewStep {

    private Long id;
    /** Not-null value. */
    private String stepId;
    private String act;
    private String f;
    private String pid;
    private String i;
    private String k;
    private String t;
    private String drn;
    private String slot;
    private long recipeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBBrewStepDao myDao;

    private DBRecipe dBRecipe;
    private Long dBRecipe__resolvedKey;


    public DBBrewStep() {
    }

    public DBBrewStep(Long id) {
        this.id = id;
    }

    public DBBrewStep(Long id, String stepId, String act, String f, String pid, String i, String k, String t, String drn, String slot, long recipeId) {
        this.id = id;
        this.stepId = stepId;
        this.act = act;
        this.f = f;
        this.pid = pid;
        this.i = i;
        this.k = k;
        this.t = t;
        this.drn = drn;
        this.slot = slot;
        this.recipeId = recipeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBBrewStepDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getStepId() {
        return stepId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStepId(String stepId) {
        this.stepId = stepId;
    }

    public String getAct() {
        return act;
    }

    public void setAct(String act) {
        this.act = act;
    }

    public String getF() {
        return f;
    }

    public void setF(String f) {
        this.f = f;
    }

    public String getPid() {
        return pid;
    }

    public void setPid(String pid) {
        this.pid = pid;
    }

    public String getI() {
        return i;
    }

    public void setI(String i) {
        this.i = i;
    }

    public String getK() {
        return k;
    }

    public void setK(String k) {
        this.k = k;
    }

    public String getT() {
        return t;
    }

    public void setT(String t) {
        this.t = t;
    }

    public String getDrn() {
        return drn;
    }

    public void setDrn(String drn) {
        this.drn = drn;
    }

    public String getSlot() {
        return slot;
    }

    public void setSlot(String slot) {
        this.slot = slot;
    }

    public long getRecipeId() {
        return recipeId;
    }

    public void setRecipeId(long recipeId) {
        this.recipeId = recipeId;
    }

    /** To-one relationship, resolved on first access. */
    public DBRecipe getDBRecipe() {
        long __key = this.recipeId;
        if (dBRecipe__resolvedKey == null || !dBRecipe__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBRecipeDao targetDao = daoSession.getDBRecipeDao();
            DBRecipe dBRecipeNew = targetDao.load(__key);
            synchronized (this) {
                dBRecipe = dBRecipeNew;
            	dBRecipe__resolvedKey = __key;
            }
        }
        return dBRecipe;
    }

    public void setDBRecipe(DBRecipe dBRecipe) {
        if (dBRecipe == null) {
            throw new DaoException("To-one property 'recipeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dBRecipe = dBRecipe;
            recipeId = dBRecipe.getId();
            dBRecipe__resolvedKey = recipeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
