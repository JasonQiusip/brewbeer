package com.ltbrew.brewbeer.persistence.greendao;

import com.ltbrew.brewbeer.persistence.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DBSLOT".
 */
public class DBSlot {

    private Long id;
    private String slotStepId;
    private Integer slotId;
    /** Not-null value. */
    private String name;
    private long recipeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBSlotDao myDao;

    private DBRecipe dBRecipe;
    private Long dBRecipe__resolvedKey;


    public DBSlot() {
    }

    public DBSlot(Long id) {
        this.id = id;
    }

    public DBSlot(Long id, String slotStepId, Integer slotId, String name, long recipeId) {
        this.id = id;
        this.slotStepId = slotStepId;
        this.slotId = slotId;
        this.name = name;
        this.recipeId = recipeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBSlotDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSlotStepId() {
        return slotStepId;
    }

    public void setSlotStepId(String slotStepId) {
        this.slotStepId = slotStepId;
    }

    public Integer getSlotId() {
        return slotId;
    }

    public void setSlotId(Integer slotId) {
        this.slotId = slotId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public long getRecipeId() {
        return recipeId;
    }

    public void setRecipeId(long recipeId) {
        this.recipeId = recipeId;
    }

    /** To-one relationship, resolved on first access. */
    public DBRecipe getDBRecipe() {
        long __key = this.recipeId;
        if (dBRecipe__resolvedKey == null || !dBRecipe__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBRecipeDao targetDao = daoSession.getDBRecipeDao();
            DBRecipe dBRecipeNew = targetDao.load(__key);
            synchronized (this) {
                dBRecipe = dBRecipeNew;
            	dBRecipe__resolvedKey = __key;
            }
        }
        return dBRecipe;
    }

    public void setDBRecipe(DBRecipe dBRecipe) {
        if (dBRecipe == null) {
            throw new DaoException("To-one property 'recipeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dBRecipe = dBRecipe;
            recipeId = dBRecipe.getId();
            dBRecipe__resolvedKey = recipeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public String toString() {
        return "DBSlot{" +
                "id=" + id +
                ", slotStepId='" + slotStepId + '\'' +
                ", slotId=" + slotId +
                ", name='" + name + '\'' +
                ", recipeId=" + recipeId +
                ", daoSession=" + daoSession +
                ", myDao=" + myDao +
                ", dBRecipe=" + dBRecipe +
                ", dBRecipe__resolvedKey=" + dBRecipe__resolvedKey +
                '}';
    }
}
