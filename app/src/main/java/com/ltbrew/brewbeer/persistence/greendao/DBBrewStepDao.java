package com.ltbrew.brewbeer.persistence.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.ltbrew.brewbeer.persistence.greendao.DBBrewStep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBBREW_STEP".
*/
public class DBBrewStepDao extends AbstractDao<DBBrewStep, Long> {

    public static final String TABLENAME = "DBBREW_STEP";

    /**
     * Properties of entity DBBrewStep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StepId = new Property(1, String.class, "stepId", false, "STEP_ID");
        public final static Property Act = new Property(2, String.class, "act", false, "ACT");
        public final static Property F = new Property(3, Integer.class, "f", false, "F");
        public final static Property Pid = new Property(4, Integer.class, "pid", false, "PID");
        public final static Property I = new Property(5, String.class, "i", false, "I");
        public final static Property K = new Property(6, Integer.class, "k", false, "K");
        public final static Property T = new Property(7, Integer.class, "t", false, "T");
        public final static Property Drn = new Property(8, Integer.class, "drn", false, "DRN");
        public final static Property Slot = new Property(9, Integer.class, "slot", false, "SLOT");
        public final static Property RecipeId = new Property(10, long.class, "recipeId", false, "RECIPE_ID");
    };

    private Query<DBBrewStep> dBRecipe_BrewStepsQuery;

    public DBBrewStepDao(DaoConfig config) {
        super(config);
    }
    
    public DBBrewStepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBBREW_STEP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STEP_ID\" TEXT NOT NULL UNIQUE ," + // 1: stepId
                "\"ACT\" TEXT," + // 2: act
                "\"F\" INTEGER," + // 3: f
                "\"PID\" INTEGER," + // 4: pid
                "\"I\" TEXT," + // 5: i
                "\"K\" INTEGER," + // 6: k
                "\"T\" INTEGER," + // 7: t
                "\"DRN\" INTEGER," + // 8: drn
                "\"SLOT\" INTEGER," + // 9: slot
                "\"RECIPE_ID\" INTEGER NOT NULL );"); // 10: recipeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBBREW_STEP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBBrewStep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getStepId());
 
        String act = entity.getAct();
        if (act != null) {
            stmt.bindString(3, act);
        }
 
        Integer f = entity.getF();
        if (f != null) {
            stmt.bindLong(4, f);
        }
 
        Integer pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(5, pid);
        }
 
        String i = entity.getI();
        if (i != null) {
            stmt.bindString(6, i);
        }
 
        Integer k = entity.getK();
        if (k != null) {
            stmt.bindLong(7, k);
        }
 
        Integer t = entity.getT();
        if (t != null) {
            stmt.bindLong(8, t);
        }
 
        Integer drn = entity.getDrn();
        if (drn != null) {
            stmt.bindLong(9, drn);
        }
 
        Integer slot = entity.getSlot();
        if (slot != null) {
            stmt.bindLong(10, slot);
        }
        stmt.bindLong(11, entity.getRecipeId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBBrewStep readEntity(Cursor cursor, int offset) {
        DBBrewStep entity = new DBBrewStep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // stepId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // act
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // f
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // pid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // i
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // k
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // t
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // drn
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // slot
            cursor.getLong(offset + 10) // recipeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBBrewStep entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStepId(cursor.getString(offset + 1));
        entity.setAct(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setF(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setI(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setK(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setT(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDrn(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSlot(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setRecipeId(cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBBrewStep entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBBrewStep entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "brewSteps" to-many relationship of DBRecipe. */
    public List<DBBrewStep> _queryDBRecipe_BrewSteps(long recipeId) {
        synchronized (this) {
            if (dBRecipe_BrewStepsQuery == null) {
                QueryBuilder<DBBrewStep> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RecipeId.eq(null));
                dBRecipe_BrewStepsQuery = queryBuilder.build();
            }
        }
        Query<DBBrewStep> query = dBRecipe_BrewStepsQuery.forCurrentThread();
        query.setParameter(0, recipeId);
        return query.list();
    }

}
